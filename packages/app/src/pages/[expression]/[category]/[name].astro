---
import BaseLayout from '../../../layouts/BaseLayout.astro';

import json from '../../../static/items.json';
import { Timer } from '../../../components/Timer';
import {
  HOME_SINCE_BREADCRUMBS,
  HOME_UNTIL_BREADCRUMBS,
  appendBreadcrumbs
} from '../../../helpers/paths';

export async function getStaticPaths() {
  const { items, date } = json;

  const currentTimeValueOf = date.valueOf();
  const expressions = ['since', 'until'];
  const paths = [];

  for (const expression of expressions) {
    const isSince = expression === 'since';
    const baseBreadcrumbs = isSince
      ? HOME_SINCE_BREADCRUMBS
      : HOME_UNTIL_BREADCRUMBS;

    for (const item of items) {
      const { title, slug } = item;
      const collectionsBreadcrumbs = appendBreadcrumbs(baseBreadcrumbs, {
        href: `/${slug}`,
        title
      });

      for (const collection of item.collections) {
        if (collection.events.length === 0) {
          // Skip generating page for collections with 0 events.
          continue;
        }

        const latestEventDate = collection.events[0].datetime;
        const latestEventValueOf = new Date(latestEventDate).valueOf();

        if (expression === 'until' && latestEventValueOf < currentTimeValueOf) {
          continue;
        }

        const collectionBreadcrumbs = appendBreadcrumbs(
          collectionsBreadcrumbs,
          { href: `/${collection.category}`, title: collection.title }
        );

        paths.push({
          params: {
            expression,
            category: slug,
            name: collection.slug
          },
          props: {
            expression,
            breadcrumbs: collectionBreadcrumbs,
            collection
          }
        });
      }
    }
  }

  return paths;
}

const { expression, collection, breadcrumbs } = Astro.props;
const date = collection.events[0].datetime;
---

<BaseLayout
  pages={breadcrumbs}
  title={collection.title}
  description={`The ${collection.title} page with ${expression} filter in imballinst's events tracker site.`}
>
  <Timer {date} {expression} {collection} client:load />
</BaseLayout>
